% Copyright 2013 Max-Planck-Institut für Eisenforschung GmbH
function femproc_generate_indentation_model_BX
%% Generation of procedure file and material file for CPFE modelling of BX indentation (with GENMAT or DAMASK)
% authors: d.mercier@mpie.de / c.zambaldi@mpie.de

gui_BX = guidata(gcf);

%% Initialization = Set bicrystal and get active GB
if str2num(get(gui_BX.handles.ind_dist_val, 'String')) >= 0
    gui_BX.GB.activeGrain = gui_BX.GB.GrainA;
else
    gui_BX.GB.activeGrain = gui_BX.GB.GrainB;
end
[gui_BX.GB.Titlegbdata, gui_BX.GB.Titlegbdatacompl] = femproc_set_title_data(gui_BX.config_map, gui_BX.GB);

guidata(gcf, gui_BX);
femproc_indentation_setting_BX;
gui_BX = guidata(gcf); guidata(gcf, gui_BX);

femproc_save_data(2);
gui_BX = guidata(gcf); guidata(gcf, gui_BX);

%% Creation of the python file run in the command line window to generate procedure file for the bicrystal
scriptname_bicrystal = sprintf('%s_FEM_model_parameters.py', gui_BX.GB.Titlegbdatacompl);

fid = fopen(scriptname_bicrystal, 'w+');
fprintf(fid, '# Generated by matlab/gui/femproc_generate_model.m --- DO NOT EDIT\n');
fprintf(fid, 'import sys\n');
fprintf(fid, 'p=''%s'' \n', gui_BX.config_CPFEM.msc_module_path);
fprintf(fid, 'if p not in sys.path: sys.path.insert(0,p) \n');
fprintf(fid, 'import scipy.io\n');
fprintf(fid, 'gb_data = scipy.io.loadmat(''%s'')\n', gui_BX.GB.Titlegbdata);
fprintf(fid, 'import msc\n');
fprintf(fid, 'import msc.bicrystal_indentation_model_from_MatlabGUI as gb_ind\n');
fprintf(fid, 'gb_ind.doit(gb_data, proc_path=r''%s'')\n', fullfile(gui_BX.config_CPFEM.proc_file_path, gui_BX.GB.Titlegbdata, ''));
fclose(fid);

%% Execute the python code that we just generated
cmd = sprintf('%s %s', gui_BX.config_CPFEM.python_executable, ...
    fullfile(pwd, scriptname_bicrystal));
commandwindow;
if ~ isempty(gui_BX.config_CPFEM.pythonpath)
    setenv('PYTHONPATH', gui_BX.config_CPFEM.pythonpath);
end
system(cmd);

%% Definition of path config file
gui_BX.path_config_file = fullfile(gui_BX.config_CPFEM.proc_file_path, gui_BX.GB.Titlegbdata, '');
guidata(gcf, gui_BX);
mkdir(gui_BX.path_config_file);

%% Move files to keep the directory cleaned and organized
% Move YAML file
gui_BX.GB.Titlegbdatacompl_YAML = strcat(gui_BX.GB.Titlegbdatacompl, '.yaml');
%try
%movefile(Titlegbdatacompl_YAML, activeBX.pathnameGF2_BC);
%catch err
%errordlg(err.message);
%end
%delete('random_inputs'); delete('manual_inputs');

% Move Python file
python_procedure_generation_file = strcat(gui_BX.GB.Titlegbdatacompl, '_FEM_model_parameters.py');

try
    movefile(python_procedure_generation_file, gui_BX.path_config_file);
catch err
    errordlg(err.message);
end

femproc_generate_material_files_BX;

% Move .mat file
try
    movefile(gui_BX.GB.Titlegbdatacompl, gui_BX.path_config_file);
catch err
    errordlg(err.message);
end

guidata(gcf, gui_BX);

end
